openapi: 3.0.3
info:
  description: |
    "API for listing available templates, document structures and generating impersonated documents with provided data.
    The API has two operation groups:
      - templates for generating single documents and
      - document structures for generating document sets.
    The service is base on a template repository, a document structure repository and a result store.
    These can be freely configured but once configured, have the same setup has to be used
    for the template and document structure repositories since they have to be consistent.

    The document generation is asynchronous, when posting a job you will get a transaction id (or provide by yourself) and
    you can query and download the results based on that."
  title: Document generation API
  version: 1.0.1
servers:
  - url: https://localhost:8080/{base-path}
    description: "Local env"
    variables:
      base-path:
        default: "v1"
tags:
  - name: templates
    description: Template element
    externalDocs:
      url: "https://www.getthedocs.tech/docs/documentation/components"
  - name: documentstructures
    description: Document structures
    externalDocs:
      url: "https://www.getthedocs.tech/docs/documentation/components"
paths:
  /templates:
    get:
      tags:
        - templates
      operationId: "getTemplates"
      summary: "Lists a page of the available document templates, or a given template in the template repository."
      x-contentType: application/json
      x-accepts: application/json
      parameters:
        - name: templateId
          description: "The template id as stored in the template repository."
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/TemplateElementId"
        - $ref: "#/components/parameters/pageable"
      responses:
        "200":
          description: "Request processed successfully and data is present."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetTemplatesResponse"
        "400":
          description: Invalid DTO
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyResponse"
        "401":
          description: Bad credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyResponse"
        "429":
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EmptyResponse"

components:
  schemas:
    # Common schema types.
    # --------------------
    EmptyResponse:
      type: object
      description: "Generic empty response."
      additionalProperties: false
      properties:
        success:
          type: boolean

    EntityIdResponse:
      type: object
      description: "Generic empty response."
      additionalProperties: false
      properties:
        id:
          type: string
          description: "id"
          maxLength: 36
          minLength: 36
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
          example: "be5d2c3b-6235-4b86-95b6-88d64610e0d3"

    ValidationErrorField:
      type: object
      description: "Container for request validation-based errors."
      additionalProperties: false
      properties:
        fieldRef:
          type: string
          description: "Field name"
          minLength: 0
          maxLength: 4000
          pattern: "^[0-9a-zA-Z.-/_]+$"
          example: "data.name"
        message:
          type: string
          description: "Validation error - code/message"
          minLength: 0
          maxLength: 4000
          pattern: "^[0-9a-zA-Z.-/_]+$"
          example: "Must be unique."

    PageableTemplate:
      type: object
      description: "Pageable query parameters"
      additionalProperties: false
      properties:
        page:
          type: integer
          description: "The page to be returned."
          format: int32
          minimum: 0
          maximum: 32768
          default: 0
          example: 0
        size:
          type: integer
          description: "The number of items to be returned."
          format: int32
          minimum: 0
          maximum: 32768
          default: 10
          example: 10
        paged:
          type: boolean
          description: "Returns whether the current Pageable contains pagination information."
          default: true
        sort:
          type: array
          description: "Sort orders in the format field name,asc|desc. You may define multiple sort criteria."
          items:
            type: string
#            format: "^([a-zA-Z0-9_-]*,asc|desc)*$"
            minLength: 0
            maxLength: 4096
#            pattern: "^([a-zA-Z0-9_-]*,asc|desc)*$"
          minItems: 0
          maxItems: 64

    Page:
      type: object
      description: "A page is a sublist of a list of objects. It allows gain information about the position of it in the containing entire list."
      properties:
        totalPages:
          type: integer
          description: "Returns the number of total pages."
          format: uint32
          minimum: 0
          maximum: 32768
          default: 0
          example: 2
        totalElements:
          type: integer
          description: "Returns the total amount of elements."
          format: int64
          minimum: 0
          default: 0
          example: 18
          maximum: 2147483647
        number:
          type: integer
          description: "Returns the number of the current Slice. Is always non-negative."
          format: uint32
          minimum: 0
          maximum: 32768
          default: 0
          example: 1
        size:
          type: integer
          description: "Returns the number of elements currently on this Slice."
          format: uint32
          minimum: 0
          default: 8
          maximum: 32768
        numberOfElements:
          type: integer
          description: "Returns the number of elements currently on this Slice."
          format: uint32
          minimum: 0
          maximum: 32768
          default: 0
          example: 8

    # API specific types.
    # -------------------

    TemplateElementId:
      description: "The template id as it is stored in the template repository."
      type: string
      minLength: 0
      maxLength: 4000
      pattern: "^[a-zA-Z0-9_\\/-]*$"
      example: "integrationtests/contracts/contract_v09_hu.docx"

    TemplateDocument:
      type: object
      additionalProperties: false
      properties:
        templateName:
          type: string
          minLength: 0
          maxLength: 4000
          pattern: "^[a-zA-Z0-9_/\\]*$"
        format:
          type: string
          minLength: 0
          maxLength: 50
          pattern: "^[a-zA-Z0-9_/\\]*$"
          enum: [DOCX, XLSX]
        locale:
          type: string
          minLength: 0
          maxLength: 50
          pattern: "^[a-zA-Z0-9_-/]*$"
        version:
          type: string
          minLength: 0
          maxLength: 4000
          pattern: "^[a-zA-Z0-9_/\\]*$"
        internalKey:
          type: string
          minLength: 0
          maxLength: 4000
          pattern: "^[a-zA-Z0-9_/\\]*$"

    GetTemplatesResponse:
      type: object
      description: "Response type for returning the available templates"
      additionalProperties: false
      properties:
        page:
          $ref: "#/components/schemas/Page"

        contents:
          type: array
          description: "List of template elements."
          items:
            $ref: "#/components/schemas/TemplateDocument"
          maxItems: 32768

  parameters:
    pageable:
      description: "The data page to be returned."
      in: query
      name: pageable
      required: false
      schema:
        $ref: "#/components/schemas/PageableTemplate"

